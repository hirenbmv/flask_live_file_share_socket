bidict==0.23.1
blinker==1.8.2
click==8.1.7
dnspython==2.6.1
eventlet==0.37.0
Flask==3.0.3
Flask-SocketIO==5.3.7
greenlet==3.1.1
gunicorn==23.0.0
h11==0.14.0
itsdangerous==2.2.0
Jinja2==3.1.4
MarkupSafe==2.1.5
packaging==24.1
python-engineio==4.9.1
python-socketio==5.11.4
pytz==2024.2
simple-websocket==1.0.0
Werkzeug==3.0.4
wsproto==1.2.0




// Include JSZip
const JSZip = window.JSZip || require("jszip");

// Initialize variables
let receivedChunks = [];
let totalChunks = 0;
let fileName = "";

// Progress bar elements
const progressContainer = document.getElementById("progress-container");
const progressBar = document.getElementById("progress-bar");

socket.on("receive_chunks", async function (data) {
  if (data.chunk) {
    // If a chunk is provided
    console.log("Received chunk:", data.chunk);

    // Show the progress bar if not already visible
    if (progressContainer.style.display === "none") {
      progressContainer.style.display = "block";
    }

    // Append the chunk to the array
    receivedChunks.push(new Uint8Array(data.chunk));

    // Optionally update totalChunks and fileName dynamically
    if (data.total_chunks) totalChunks = data.total_chunks;
    if (data.filename) fileName = data.filename;

    // Update progress bar
    const progressPercent = Math.floor((receivedChunks.length / totalChunks) * 100);
    progressBar.style.width = `${progressPercent}%`;
    progressBar.textContent = `${progressPercent}%`;

    // Check if all chunks are received
    // console.log("Chunk Length",receivedChunks.length);
    // console.log("totalChunks",totalChunks);
    if (receivedChunks.length === totalChunks) {
      console.log("All chunks received, reconstructing file.");

      // Concatenate all chunks into a Blob
      const fileBlob = new Blob(receivedChunks, { type: "application/octet-stream" });

      // Wrap the file in a ZIP archive using JSZip
      const zip = new JSZip();
      zip.file(fileName, fileBlob); // Add the file to the ZIP archive

      // Generate the ZIP file as a Blob
      const zipBlob = await zip.generateAsync({ type: "blob" });

      // Trigger ZIP file download
      const zipLink = document.createElement("a");
      zipLink.href = URL.createObjectURL(zipBlob);
      zipLink.download = `${fileName}.zip`; // Add .zip extension
      document.body.appendChild(zipLink);
      zipLink.click();
      document.body.removeChild(zipLink);

      console.log("ZIP file download completed.");

      // Clear the receivedChunks array for future use
      receivedChunks = [];

      // Hide the progress bar after completion
      progressBar.style.width = "0%";
      progressBar.textContent = "0%";
      progressContainer.style.display = "none";
    }
  } else if (data.full_file) {
    console.log("Received file data:", data);

    // Show the progress bar
    progressContainer.style.display = "block";

    // Get the Base64 encoded file data and filename
    const encodedFile = data.full_file;
    const fileName = data.filename;

    // Decode the Base64 content
    const byteCharacters = atob(encodedFile); // Decode the Base64 string back to binary
    const byteArrays = [];

    // Convert the decoded content back to an array of bytes
    for (let offset = 0; offset < byteCharacters.length; offset += 512) {
      const slice = byteCharacters.slice(offset, offset + 512);
      const byteNumbers = new Array(slice.length);
      for (let i = 0; i < slice.length; i++) {
        byteNumbers[i] = slice.charCodeAt(i);
      }
      byteArrays.push(new Uint8Array(byteNumbers));

      // Update progress bar
      const progressPercent = Math.floor((offset / byteCharacters.length) * 100);
      progressBar.style.width = `${progressPercent}%`;
      progressBar.textContent = `${progressPercent}%`;
    }

    // Create a Blob from the byte arrays
    const fileBlob = new Blob(byteArrays, { type: "application/octet-stream" });

    // Wrap the file in a ZIP archive using JSZip
    const zip = new JSZip();
    zip.file(fileName, fileBlob); // Add the file to the ZIP archive

    // Generate the ZIP file as a Blob
    const zipBlob = await zip.generateAsync({ type: "blob" });

    // Trigger ZIP file download
    const zipLink = document.createElement("a");
    zipLink.href = URL.createObjectURL(zipBlob);
    zipLink.download = `${fileName}.zip`; // Add .zip extension
    document.body.appendChild(zipLink);
    zipLink.click();
    document.body.removeChild(zipLink);

    console.log("ZIP file download completed.");

    // Hide the progress bar after completion
    progressBar.style.width = "0%";
    progressBar.textContent = "0%";
    progressContainer.style.display = "none";
  } else {
    console.error("No valid file data received.");
  }
});

